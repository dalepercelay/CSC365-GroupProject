import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np
from numpy.random import randint

def database_connection_url():
    dotenv.load_dotenv()
    """DB_USER: str = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
    DB_PORT: str = os.environ.get("POSTGRES_PORT")
    DB_NAME: str = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"
    """
    return "postgresql://postgres:postgres@127.0.0.1:54322/postgres"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

# with engine.begin() as conn:
#     conn.execute(sqlalchemy.text("""
#     DROP TABLE IF EXISTS animals_owned;
#     DROP TABLE IF EXISTS fights;
#     DROP TABLE IF EXISTS enemies;
#     DROP TABLE IF EXISTS transactions;
#     DROP TABLE IF EXISTS animals;
#     DROP TABLE IF EXISTS users;

# create table
#   public.users (
#     user_id bigint generated by default as identity,
#     time timestamp with time zone not null default (now() at time zone 'utc'::text),
#     name text not null,
#     constraint user_pkey primary key (user_id),
#     constraint users_name_check check ((length(name) <= 100))
#   ) tablespace pg_default;

# create table
#   public.animals (
#     animal_id bigint generated by default as identity,
#     time timestamp with time zone not null default (now() at time zone 'utc'::text),
#     name text not null,
#     attack integer not null default 0,
#     defense integer not null default 0,
#     price integer not null default 0,
#     in_use boolean not null default false,
#     constraint animal_pkey primary key (animal_id),
#     constraint animals_attack_check check (
#       (
#         (attack >= '-1'::integer)
#         and (attack <= 81)
#       )
#     ),
#     constraint animals_defense_check check (
#       (
#         (defense >= '-1'::integer)
#         and (defense <= 81)
#       )
#     ),
#     constraint animals_name_check check ((length(name) <= 100))
#   ) tablespace pg_default;

# create table
#   public.animals_owned (
#     inventory_id bigint generated by default as identity,
#     user_id bigint null,
#     animal_id bigint null,
#     constraint animals_owned_pkey primary key (inventory_id),
#     constraint animals_owned_animal_id_fkey foreign key (animal_id) references animals (animal_id),
#     constraint animals_owned_user_id_fkey foreign key (user_id) references users (user_id)
#   ) tablespace pg_default;

# create table
#   public.transactions (
#     transaction_id bigint generated by default as identity,
#     time timestamp with time zone not null default (now() at time zone 'utc'::text),
#     gold integer not null default 0,
#     description text not null,
#     user_id bigint null,
#     animal_id bigint null,
#     health integer not null default 0,
#     constraint transactions_pkey primary key (transaction_id),
#     constraint transactions_animal_id_fkey foreign key (animal_id) references animals (animal_id),
#     constraint transactions_user_id_fkey foreign key (user_id) references users (user_id)
#   ) tablespace pg_default;

# create table
#   public.enemies (
#     enemy_id bigint generated by default as identity,
#     time timestamp with time zone not null default (now() at time zone 'utc'::text),
#     name text not null,
#     attack integer not null default 0,
#     defense integer not null default 0,
#     constraint enemy_pkey primary key (enemy_id)
#   ) tablespace pg_default;

# create table
#   public.fights (
#     fight_id bigint generated by default as identity,
#     time timestamp with time zone not null default (now() at time zone 'utc'::text),
#     animal_id bigint not null,
#     user_id bigint not null,
#     enemy_id bigint not null,
#     transaction_id integer not null,
#     outcome boolean not null,
#     constraint fight_pkey primary key (fight_id),
#     constraint fight_animal_id_fkey foreign key (animal_id) references animals (animal_id),
#     constraint fight_enemy_id_fkey foreign key (enemy_id) references enemies (enemy_id),
#     constraint fight_user_id_fkey foreign key (user_id) references users (user_id),
#     constraint fights_transaction_id_fkey foreign key (transaction_id) references transactions (transaction_id)
#   ) tablespace pg_default;
#     """))

# num_users = 200000
# num_animals = 800000
# num_enemies = 20000
# fake = Faker()
# total_posts = 0

# with engine.begin() as conn:
#     # inserting users
#     for i in range(num_users):
#         if (i % 10 == 0):
#             print(i)
#         total_posts += 1
#         profile = fake.profile()

#         user_id = conn.execute(sqlalchemy.text("""
#         INSERT INTO users (name) VALUES (:name) RETURNING user_id;
#         """), {"name": profile['name']}).scalar_one()
        
#         conn.execute(sqlalchemy.text("INSERT INTO transactions (user_id, gold, description) VALUES (:user_id, 200, 'starting gold')"), {"user_id": user_id})
    
#     # inserting animals
#     for i in range(num_animals):
#         if (i % 10 == 0):
#             print(i)
#         total_posts += 1
#         attack = randint(1, 80)
#         defense = randint(1, 80)
#         animal_id = conn.execute(sqlalchemy.text("""
#         INSERT INTO animals (name, attack, defense, price) 
#         VALUES (:name, :attack, :defense, :price) RETURNING animal_id;
#         """), {"name": fake.first_name(), "attack": attack, "defense": defense, "price": attack + defense}).scalar_one()
        
#         conn.execute(sqlalchemy.text("INSERT INTO transactions (animal_id, health, description) VALUES (:animal_id, 100, 'starting health')"), {"animal_id": animal_id})

        
#     # inserting enemies
#     for i in range(num_enemies):
#         if (i % 10 == 0):
#             print(i)
#         total_posts += 1
#         conn.execute(sqlalchemy.text("""
#         INSERT INTO enemies (name, attack, defense) 
#         VALUES (:name, :attack, :defense);
#         """), {"name": fake.last_name(), "attack": randint(1, 80), "defense": randint(1, 80)})

#     print("total posts: ", total_posts)


"""import os
import dotenv
from sqlalchemy import create_engine

def database_connection_url():
    dotenv.load_dotenv()

    return os.environ.get("POSTGRES_URI")

#engine = create_engine(database_connection_url(), pool_pre_ping=True)
engine = create_engine("postgresql+psycopg2://postgres.lgggotiimtosbxfjhsby:dasspokemon123456789!@aws-0-us-west-1.pooler.supabase.com:5432/postgres", pool_pre_ping=True)"""